#!/usr/bin/env node

"use strict";

const fs = require("fs");
const glob = require("glob");
const json5 = require("json5");
const path = require("path");
const puppeteer = require("puppeteer");
const util = require("util");

const { coreLogger, getLogger } = require("../lib/logger");
const { Config, Profile, initialConfig } = require("../lib/config");
const screenshot = require("../lib/screenshot");
const sleep = require("../lib/sleep");

const statAsync = util.promisify(fs.stat);
const readFileAsync = util.promisify(fs.readFile);
const writeFileAsync = util.promisify(fs.writeFile);
const globAsync = util.promisify(glob);

const logger = coreLogger;

const configFileName = "archerfish.json5";

/**
 * Loads the configuration file.
 * @returns {Config}
 */
async function loadConfig() {
  const { filePath, content } = await searchConfig();
  logger.info(`Using configuration file '${filePath}'.`);
  try {
    const data = json5.parse(content);
    return new Config(filePath, data);
  } catch (err) {
    throw new Error(`failed to load configuration file '${filePath}': ${err}`);
  }
}

/**
 * Searches configuration file in the nearest ancestor directory.
 * @returns {Promise<Object>} An object containing `file` and `content`.
 */
async function searchConfig() {
  const cwd = process.cwd();
  const rootDirPath = path.parse(cwd).root;
  let dirPath = cwd;
  while (true) {
    const configFilePath = path.resolve(dirPath, configFileName);
    let content;
    try {
      content = await readFileAsync(configFilePath, "utf-8");
    } catch (err) {
      // ignore ENOENT; continue searching the parent directories
      if (err.code !== "ENOENT") {
        throw new Error(`failed to load configuration file '${configFilePath}': ${err}`);
      }
    }
    if (content !== undefined) {
      return {
        filePath: configFilePath,
        content : content,
      };
    }
    if (dirPath === rootDirPath) {
      throw new Error("failed to load configuration file: no configuration file found");
    }
    dirPath = path.resolve(dirPath, "..");
  }
}

/**
 * Finds all tasks for the profile.
 * @param {Profile} profile
 * @param {string[]} globs
 * @returns {Promise<string[]>} The absolute paths of task files.
 */
async function findTasks(profile, globs) {
  const completedGlobs = globs.length === 0 ? ["**/*.js"] : globs;
  const taskFilePaths = await globAll(completedGlobs, {
    cwd     : profile.tasksDirPath(),
    nodir   : true,
    absolute: true,
  });
  if (taskFilePaths.length === 0) {
    throw new Error("no tasks found");
  }
  return taskFilePaths;
}

/**
 * Finds all files and directories that match to one of given globs.
 * @param {string[]} globs
 * @param {Object} opts - Options passed to the `glob` package.
 * @returns {Promise<string[]>} The list of found files and directories.
 */
async function globAll(globs, opts) {
  const allMatches = [];
  for (const g of globs) {
    const matches = await globAsync(g, opts);
    Array.prototype.push.apply(allMatches, matches);
  }
  return distinct(allMatches);
}

/**
 * Removes duplicate elements from an array.
 * @param {Array} arr
 * @returns {Array}
 */
function distinct(arr) {
  return arr.filter((elem, i) => arr.indexOf(elem) === i);
}

/**
 * Runs all tasks.
 * @param {Profile} profile
 * @param {Browser} browser
 * @param {string[]} taskFilePaths - The paths to the task files.
 * @returns {Promise<void>}
 */
async function runTasks(profile, browser, taskFilePaths) {
  logger.trace("Runing tasks...");
  for (const taskFilePath of taskFilePaths) {
    try {
      const task = require(taskFilePath);
      await task({
        profile   : profile,
        browser   : browser,
        getLogger : getLogger,
        sleep     : sleep,
        screenshot: screenshot(profile, taskFilePath),
      });
    } catch (err) {
      const shortName = path.relative(profile.tasksDirPath(), taskFilePath);
      logger.error(`Task '${shortName}' failed.`);
      console.error(err); // eslint-disable-line no-console
    }
  }
  logger.info("All tasks finished!");
}

/**
 * Runs a hook script if exists.
 * @param {Profile} profile
 * @param {Browser} browser
 * @param {string} key
 * @returns {Promise<void>}
 */
async function runHook(profile, browser, key) {
  if (profile.hooks[key] !== undefined) {
    logger.trace(`Running ${key} hook...`);
    const hook = require(path.resolve(profile.rootDirPath(), profile.hooks[key]));
    await hook({
      profile  : profile,
      browser  : browser,
      getLogger: getLogger,
      sleep    : sleep,
    });
  }
}

/**
 * `init` subcommand.
 * @returns {Promise<void>}
 */
async function init() {
  const configFilePath = path.resolve(process.cwd(), configFileName);
  let exists = true;
  try {
    await statAsync(configFilePath);
  } catch (err) {
    if (err.code === "ENOENT") {
      exists = false;
    }
  }
  if (exists) {
    process.stderr.write("Project is already initialized.\n");
    return;
  }
  await writeFileAsync(configFilePath, initialConfig, "utf-8");
  process.stdout.write(`Initialized project: ${configFilePath}\n`);
}

/**
 * `run` subcommand.
 * @param {string} profileName
 * @param {string[]} globs
 * @returns {Promise<void>}
 */
async function run(profileName, globs) {
  Profile.assertNameValid(profileName);
  const config = await loadConfig();
  const profile = config.getProfile(profileName);
  const matches = await findTasks(profile, globs);
  logger.trace("Launching browser...");
  const browser = await puppeteer.launch();
  await runHook(profile, browser, "beforeAll");
  await runTasks(profile, browser, matches);
  await runHook(profile, browser, "afterAll");
  await browser.close();
}

const commander = require("commander");

commander
  .command("init")
  .description("initialize a project")
  .action(() => {
    init().catch(err => {
      console.error(err); // eslint-disable-line no-console
      process.exit(1);
    });
  });

commander
  .command("run <profile> [glob...]")
  .description("run tasks")
  .action((profileName, globs) => {
    run(profileName, globs).catch(err => {
      console.error(err); // eslint-disable-line no-console
      process.exit(1);
    });
  });

commander.parse(process.argv);
